<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:ChildAwareTestBase.kt$ChildAwareTestBase.Root${ }</ID>
    <ID>EmptyFunctionBlock:ChildLifecycleTest.kt$ChildLifecycleTest.Child${ }</ID>
    <ID>EmptyFunctionBlock:ChildLifecycleTest.kt$ChildLifecycleTest.Parent${ }</ID>
    <ID>EmptyFunctionBlock:DestroyableTest.kt$DestroyableTest.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:NodeLifecycleAwareTest.kt$NodeLifecycleAwareTest.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:NodeLifecycleAwareTest.kt$NodeLifecycleAwareTest.TestNode${ }</ID>
    <ID>EmptyFunctionBlock:ParentLifecycleTest.kt$ParentLifecycleTest.Child${ }</ID>
    <ID>EmptyFunctionBlock:ParentLifecycleTest.kt$ParentLifecycleTest.Parent${ }</ID>
    <ID>EmptyFunctionBlock:SavesInstanceStateTest.kt$SavesInstanceStateTest.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:UpNavigationTest.kt$UpNavigationTest.Child${ }</ID>
    <ID>EmptyFunctionBlock:UpNavigationTest.kt$UpNavigationTest.Parent${ }</ID>
    <ID>ForbiddenComment:BaseNavModel.kt$BaseNavModel$// TODO: think about how we can avoid keeping unnecessary object after state initialization</ID>
    <ID>ForbiddenComment:ChildAwareImplTest.kt$ChildAwareImplTest$// TODO: test different child lifecycle combinations (except ones MinimumCombinedLifecycle already tested)</ID>
    <ID>ForbiddenComment:ParentLifecycleTest.kt$ParentLifecycleTest$// TODO: Make it BaseNavModel test</ID>
    <ID>MagicNumber:RequestCodeRegistry.kt$RequestCodeRegistry$0x0000FFFF</ID>
    <ID>MagicNumber:RequestCodeRegistry.kt$RequestCodeRegistry$4</ID>
    <ID>MaxLineLength:MutableSavedStateMapImpl.kt$MutableSavedStateMapImpl$check(!lock) { "This MutableSavedStateMap has already dumped its state, it is meaningless to write anything anymore" }</ID>
    <ID>MaxLineLength:ParentNode.kt$ParentNode$?:</ID>
    <ID>MaxLineLength:PermissionRequesterHost.kt$PermissionRequesterHost.FragmentHost$ContextCompat.checkSelfPermission(fragment.requireContext(), permission) == PackageManager.PERMISSION_GRANTED</ID>
    <ID>MaxLineLength:RoutingElement.kt$RoutingElement$return "RoutingElement(key=$key, fromState=$fromState, targetState=$targetState, operation=$operation, transitionHistory=$transitionHistory)"</ID>
    <ID>MaxLineLength:UpdateElements.kt$UpdateElements$"Initial active index $initialActiveIndex is out of bounds of provided list of items: ${this.elements.indices}"</ID>
    <ID>TooManyFunctions:Node.kt$Node : NodeLifecycleNodeView</ID>
    <ID>TooManyFunctions:ParentNode.kt$ParentNode&lt;Routing : Any> : NodeResolver</ID>
    <ID>UnusedPrivateMember:Node.kt$Node$private val lifecycleRegistry = LifecycleRegistry(this)</ID>
    <ID>UseRequire:RequestCodeRegistry.kt$RequestCodeRegistry$throw IllegalArgumentException("nbLowerBitsForIds can't be larger than 4")</ID>
    <ID>UseRequire:RequestCodeRegistry.kt$RequestCodeRegistry$throw IllegalArgumentException("nbLowerBitsForIds can't be less than 1")</ID>
  </CurrentIssues>
</SmellBaseline>
